version: "3.8"

services:
  gatewayservice:
    # build:
    #   context: ./Apps/Backend/ApiGateway
    #   dockerfile: Dockerfile
    #   target: build
    image: thanhphat0/api-gateway:1.0.0
    container_name: gateway_container
    env_file:
      - .env
    environment:
      - ASPNETCORE_URLS=http://+:${GATEWAY_URLS}
      - ASPNETCORE_ENVIRONMENT=Development
      - FRONTEND_URLS=https://www.todolist.x10.network
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_URLS}"
    # command: "dotnet watch run --urls http://+:${GATEWAY_URLS}"
    volumes:
      - "./Apps/Backend/ApiGateway:/src"

  mysql:
    image: mysql:8.0
    container_name: mysql_container
    restart: always
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  authservice:
    build:
      context: ./Apps/Backend/IdentityService
      dockerfile: Dockerfile
      target: build
    container_name: auth_container
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENV=Development
      - ASPNETCORE_URLS=http://+:${IDENTITY_URLS}
      - ConnectionStrings__Default=Server=${MYSQL_SERVER};Database=${MYSQL_DATABASE};User Id=${MYSQL_USER};Password=${MYSQL_PASSWORD};
    ports:
      - "${IDENTITY_PORT}:${IDENTITY_URLS}"
    depends_on:
      - mysql
    command: "dotnet watch run --urls http://+:${IDENTITY_URLS}"
    volumes:
      - "./Apps/Backend/IdentityService:/src"

  taskservice:
    build:
      context: ./Apps/Backend/TaskService
      dockerfile: Dockerfile
      target: build
    container_name: task_container
    env_file:
      - .env
    environment:
      - TYPE_LOG=${TYPE_LOG}
      - TASK_URLS=${TASK_URLS}
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
    ports:
      - "${TASK_PORT}:${TASK_URLS}"
    depends_on:
      - postgresservice
    command: "mvn spring-boot:run"
    volumes:
      - "./Apps/Backend/TaskService/src:/src/src"

  postgresservice:
    image: postgres:15
    container_name: postgres_container
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRESQL_DATABASE}
      - POSTGRES_USER=${POSTGRESQL_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    ports:
      - "${POSTGRESQL_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  frontend_service:
    build:
      context: ./Apps/Frontend/Todo-frontend
      dockerfile: Dockerfile
      target: build
    container_name: frontend_container
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_URLS}"
    depends_on:
      - gatewayservice
    command: "npm run dev"
    volumes:
      - "./Apps/Frontend/Todo-frontend:/src"
      # 2. THÃŠM VOLUME áº¨N DANH NÃ€Y ðŸ‘‡
      # NÃ³ ghi Ä‘Ã¨ thÆ° má»¥c node_modules trÃªn mÃ¡y host báº±ng má»™t thÆ° má»¥c trá»‘ng bÃªn trong container
      - /src/node_modules

volumes:
  mysql_data:
  postgres_data:
